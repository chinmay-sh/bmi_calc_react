{"version":3,"sources":["logo.svg","components/OptionButton/OptionButton.js","components/TextField/TextField.js","components/Button/Button.js","components/ChartModal/ChartModal.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","OptionButton","props","state","isImperial","Dropdown","as","ButtonGroup","Button","variant","disabled","this","Toggle","split","id","Menu","Item","href","React","Component","TextField","InputGroup","size","className","Prepend","Text","preText","FormControl","aria-label","aria-describedby","ButtonSubmit","onClick","click","text","App","Container","fluid","Row","Col","lg","span","offset","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,0KC4B5BC,E,kDAvBX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,YAAY,GAHF,E,qDAQd,OACI,kBAACC,EAAA,EAAD,CAAUC,GAAIC,KACV,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,UAAQ,GAAEC,KAAKR,MAAMC,WAAX,qBAEpC,kBAACC,EAAA,EAASO,OAAV,CAAiBC,OAAK,EAACJ,QAAQ,UAAUK,GAAG,yBAE5C,kBAACT,EAAA,EAASU,KAAV,KACI,kBAACV,EAAA,EAASW,KAAV,CAAeC,KAAK,cAApB,YACA,kBAACZ,EAAA,EAASW,KAAV,CAAeC,KAAK,cAApB,gB,GAjBOC,IAAMC,W,gBCgBlBC,E,uKAbP,OAEI,kBAACC,EAAA,EAAD,CAAYC,KAAK,KAAKC,UAAU,QAC5B,kBAACF,EAAA,EAAWG,QAAZ,KACA,kBAACH,EAAA,EAAWI,KAAZ,CAAiBX,GAAG,wBAAwBH,KAAKT,MAAMwB,UAEvD,kBAACC,EAAA,EAAD,CAAaC,aAAW,QAAQC,mBAAiB,8B,GATzCX,IAAMC,W,wBCWfW,E,uKARP,OAEI,kBAACtB,EAAA,EAAD,CAAQc,KAAMX,KAAKT,MAAMoB,KAAMC,UAAU,OAAOd,QAASE,KAAKT,MAAMO,QAASsB,QAASpB,KAAKT,MAAM8B,OAAQrB,KAAKT,MAAM+B,U,GALrGf,IAAMC,W,QCDRD,IAAMC,UCgDhBe,MA1Cf,WACE,OACE,yBAAKX,UAAU,OACb,kBAACY,EAAA,EAAD,CAAWZ,UAAU,YAAYa,OAAK,GACpC,qDAEA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAK,wCAAa,kBAAC,EAAD,SAGpB,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAACC,KAAM,GAAGC,OAAO,IACxB,kBAAC,EAAD,CAAWf,QAAO,mBAItB,kBAACW,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAACC,KAAM,GAAGC,OAAO,IACxB,kBAAC,EAAD,CAAWf,QAAO,mBAItB,kBAACW,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAc7B,QAAQ,UAAUwB,KAAK,YAAYX,KAAK,QAExD,kBAACgB,EAAA,EAAD,KACE,kBAAC,EAAD,CAAc7B,QAAQ,SAASwB,KAAK,QAAQX,KAAK,SAIrD,kBAACe,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAK,kBAAC,EAAD,CAAc7B,QAAQ,OAAOwB,KAAK,YAAYX,KAAK,KAAKU,MAAO,WAClEU,QAAQC,IAAI,mBC9BJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.1b83089e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport {Dropdown,Button,ButtonGroup} from 'react-bootstrap';\r\n\r\n\r\nclass OptionButton extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isImperial: false\r\n        }\r\n      }\r\n\r\n    render(){\r\n        return(\r\n            <Dropdown as={ButtonGroup}>\r\n                <Button variant=\"primary\" disabled>{this.state.isImperial ? `Imperial`:`Metric`}</Button>\r\n\r\n                <Dropdown.Toggle split variant=\"primary\" id=\"dropdown-split-basic\" />\r\n\r\n                <Dropdown.Menu>\r\n                    <Dropdown.Item href=\"#/action-1\">Imperial</Dropdown.Item>\r\n                    <Dropdown.Item href=\"#/action-2\">Metric</Dropdown.Item>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OptionButton;","import React from 'react';\r\nimport {InputGroup,FormControl} from 'react-bootstrap';\r\n\r\n\r\nclass TextField extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n\r\n            <InputGroup size=\"md\" className=\"mb-3\">\r\n                <InputGroup.Prepend>\r\n                <InputGroup.Text id=\"inputGroup-sizing-lg\">{this.props.preText}</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-sm\" />\r\n            </InputGroup>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default TextField;","import React from 'react';\r\nimport {Button} from 'react-bootstrap';\r\n\r\n\r\nclass ButtonSubmit extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n\r\n            <Button size={this.props.size} className=\"mb-4\" variant={this.props.variant} onClick={this.props.click}>{this.props.text}</Button>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default ButtonSubmit;","import React from 'react';\r\nimport {Modal} from 'react-bootstrap';\r\n\r\nclass ChartModal extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            showModal: false,\r\n            activeModal: ''\r\n        }\r\n\r\n        this.modalDisplay = this.modalDisplay.bind(this);\r\n    }\r\n    \r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChartModal;","import React from 'react';\nimport logo from '../../logo.svg';\nimport './App.css';\nimport OptionButton from '../OptionButton/OptionButton';\nimport TextField from '../TextField/TextField';\nimport {Container, Row,Col} from 'react-bootstrap';\nimport ButtonSubmit from '../Button/Button';\nimport ChartModal from '../ChartModal/ChartModal';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container className=\"container\" fluid>\n        <h1>Simple BMI Calculator</h1>\n\n        <Row>\n          <Col><h5>System : <OptionButton /></h5></Col>\n        </Row>\n\n        <Row>\n          <Col lg={{span: 10,offset:1}}>\n            <TextField preText={`Weight (kgs)`} />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col lg={{span: 10,offset:1}}>\n            <TextField preText={`Height (cms)`} />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <ButtonSubmit variant=\"success\" text=\"Calculate\" size=\"lg\" />\n          </Col>\n          <Col>\n            <ButtonSubmit variant=\"danger\" text=\"RESET\" size=\"lg\" />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col><ButtonSubmit variant=\"info\" text=\"BMI CHART\" size=\"md\" click={()=>{\n            console.log('pressed')\n          }} /></Col>\n        </Row>\n\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}